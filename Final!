local repo = 'https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/'

local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()

local Window = Library:CreateWindow({
    -- Set Center to true if you want the menu to appear in the center
    -- Set AutoShow to true if you want the menu to appear when it is created
    -- Position and Size are also valid options here
    -- but you do not need to define them unless you are changing them :)

    Title = 'DECOY.CC',
    Center = true,
    AutoShow = true,
    TabPadding = 8,
    MenuFadeTime = 0.2
})

-- CALLBACK NOTE:
-- Passing in callback functions via the initial element parameters (i.e. Callback = function(Value)...) works
-- HOWEVER, using Toggles/Options.INDEX:OnChanged(function(Value) ... ) is the RECOMMENDED way to do this.
-- I strongly recommend decoupling UI code from logic code. i.e. Create your UI elements FIRST, and THEN setup :OnChanged functions later.

-- You do not have to set your tabs & groups up this way, just a prefrence.
local Tabs = {
    -- Creates a new tab titled Main
    Main = Window:AddTab('Main'),
    RollBack = Window:AddTab('RollBack'),
    ['UI Settings'] = Window:AddTab('UI Settings'),
}

-- Groupbox and Tabbox inherit the same functions
-- except Tabboxes you have to call the functions on a tab (Tabbox:AddTab(name))
local LeftGroupBox = Tabs.Main:AddLeftGroupbox('Main Exploits')
local RightGroupBox = Tabs.Main:AddRightGroupbox('Main Exploits')
local LeftBackGroupBox = Tabs.RollBack:AddLeftGroupbox('RollBack Exploits')
local RightBackGroupBox = Tabs.RollBack:AddRightGroupbox('RollBack Exploits 2')

local function ActivateESP()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/714warelol/Test/main/espanimedefenders.txt"))()
    -- Add your activation code here
end

local function DeactivateESP()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/714warelol/Test/main/animdefendersespoff.txt"))()
    -- Add your deactivation code here
end

local espActive = false

-- Add a toggle button to the tab
local toggleState = false -- Initial state of the toggle

RightGroupBox:AddToggle('MyToggle', {
    Text = "ESP (dont spam)",
    Default = false,
    Callback = function(value)
        if value and not espActive then
            ActivateESP()
            espActive = true
        elseif not value and espActive then
            DeactivateESP()
            espActive = false
        end
    end
})

local function ActivateFLY()
    print("soon")
    -- Add your activation code here
end

local function DeactivateFLY()
    print("soon")
    -- Add your deactivation code here
end

-- Add a toggle button to the tab
local toggleState = false -- Initial state of the toggle

RightGroupBox:AddToggle('MyToggle', {
    Text = "FLY (dont spam)",
    Default = false,
    Callback = function(value)
        toggleState = value
        if toggleState then
            ActivateFLY()
        else
            DeactivateFLY()
        end
    end
})

local function ActivateSPEED()
    print("soon")
    -- Add your activation code here
end

local function DeactivateSPEED()
     print("soon")
    -- Add your deactivation code here
end

-- Add a toggle button to the tab
local toggleState = false -- Initial state of the toggle

RightGroupBox:AddToggle('MyToggle', {
    Text = "CFRAME (dont spam)",
    Default = false,
    Callback = function(value)
        toggleState = value
        if toggleState then
            ActivateSPEED()
        else
            DeactivateSPEED()
        end
    end
})

local function ActivateRollback()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/714warelol/Test/main/lagger.txt"))()
    -- Add your activation code here
end

local function DeactivateRollback()
     print("table: 0x141f418fja814194721hd218adkkasdu21841397ajd81784")
    -- Add your deactivation code here
end

local toggleState = false

LeftBackGroupBox:AddToggle('MyToggle', {
    Text = 'Enable Rollback (This will Cause Lag)',
    Default = false, -- Default value (true / false)
    Tooltip = 'Self Explanatory.', -- Information shown when you hover over the toggle

    Callback = function(value)
        if value then
            ActivateRollback()
        elseif not value then
            DeactivateRollback()
        end
    end
})

local function ActivateAFK()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/714warelol/Test/main/whattheflip"))()
end

local function DeactivateAFK()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/714warelol/Test/main/undoafk"))()
end

local toggleState = false

LeftGroupBox:AddToggle('MyToggle', {
    Text = 'AFK Farm',
    Default = false, -- Default value (true / false)
    Tooltip = 'Self Explanatory.', -- Information shown when you hover over the toggle

      Callback = function(value)
         toggleState = value
        if toggleState then
            ActivateAFK()
        else
            DeactivateAFK()
        end
    end
})

local function ActivateFixCam()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/714warelol/Test/main/CamFix"))()
end


local function DeactivateFixCam()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/714warelol/Test/main/StopCamFix"))()
end

local camActive = false

local toggleState = false

LeftGroupBox:AddToggle('MyToggle', {
    Text = 'Fix Camera',
    Default = false, -- Default value (true / false)
    Tooltip = 'Self Explanatory.', -- Information shown when you hover over the toggle

      Callback = function(value)
        if value and not camActive then
            ActivateFixCam()
            camActive = true
        elseif not value and camActive then
            DeactivateFixCam()
            camActive = false
        end
    end
})
LeftGroupBox:AddDropdown('RollBackDropDown', {
    Values = { 'Windmill Village', 'soon ', 'soon  ', 'soon   ' },
    Default = 1, -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected

    Text = '',
    Tooltip = 'Self Explanatory.', -- Information shown when you hover over the dropdown

    Callback = function(Value)
        print('Selected Option:', Value)
    end
})

local MyButton = LeftGroupBox:AddButton({
    Text = 'Teleport',
    Func = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/714warelol/Test/main/Teleport"))()
    end,
    DoubleClick = false,
    Tooltip = 'Self Explanatory.'
})

LeftBackGroupBox:AddSlider('MySlider', {
    Text = 'Lag Value',
    Default = 5,
    Min = 0,
    Max = 5,
    Rounding = 1,
    Compact = false,

    Callback = function(Value)
        print('Lag Value has been changed new Value:', Value)
    end
})

LeftBackGroupBox:AddDropdown('RollBackDropDown', {
    Values = { 'Trait Rerolls (Only Beta)', 'Trade Rollback (Only Beta)', 'Summon Units Rollback (Only Beta)', 'Gems Booth Rollback (Only Beta)' },
    Default = 1, -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected

    Text = '',
    Tooltip = 'Self Explanatory.', -- Information shown when you hover over the dropdown

    Callback = function(Value)
        print('Selected Option:', Value)
    end
})

local MyButton = LeftBackGroupBox:AddButton({
    Text = 'Server Hop (Finishes Rollback)',
    Func = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/714warelol/Test/main/crasher.txt"))()
    end,
    DoubleClick = true,
    Tooltip = 'Self Explanatory.'
})


local LeftGroupBox2 = Tabs.Main:AddLeftGroupbox('Visuals');
LeftGroupBox2:AddLabel('Gems Adder (Only Visual)', true)

LeftGroupBox2:AddInput('MyTextbox', {
    Default = '',
    Numeric = true, -- true / false, only allows numbers
    Finished = true, -- true / false, only calls callback when you press enter

    Text = 'Enter Amount of Gems',
    Tooltip = 'Updated your gems (only visuals u cant buy anything with this)', -- Information shown when you hover over the textbox

    Placeholder = 'Enter Amount of Gems', -- placeholder text when the box is empty
    -- MaxLength is also an option which is the max length of the text

    Callback = function(Value)
        print('Updated Gems to:', Value)
    end
})

LeftGroupBox2:AddLabel('Coins Adder (Only Visual)', true)

LeftGroupBox2:AddInput('MyTextbox', {
    Default = '',
    Numeric = true, -- true / false, only allows numbers
    Finished = true, -- true / false, only calls callback when you press enter

    Text = 'Enter Amount of Coins',
    Tooltip = 'Updated your Coins (only visuals u cant buy anything with this)', -- Information shown when you hover over the textbox

    Placeholder = 'Enter Amount of Coins', -- placeholder text when the box is empty
    -- MaxLength is also an option which is the max length of the text

    Callback = function(Value)
        print('Updated Coins to:', Value)
    end
})

-- UI Settings
local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')

local LeftGroupBox3 = Tabs.Main:AddLeftGroupbox('Misc');

local MyButton = LeftGroupBox3:AddButton({
    Text = 'Low GFX',
    Func = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/714warelol/Test/main/LOWGFX"))()
    end,
    DoubleClick = false,
    Tooltip = 'ENABLES LOW GFX'
})

local MyButton = LeftGroupBox3:AddButton({
    Text = 'Streamer Mode',
    Func = function()
        print("Hello")
    end,
    DoubleClick = false,
    Tooltip = 'ENABLES STREAMER MODE (ANONYMOUS MODE)'
})


-- I set NoUI so it does not show up in the keybinds menu

local originalUnload = Library.Unload
Library.Unload = function(...)
    if espActive then
        DeactivateESP()
        espActive = false
    end
    originalUnload(...)
    print("GUI and functions unloaded")
end

MenuGroup:AddButton('Unload', function() Library:Unload() end)
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' })

Library.ToggleKeybind = Options.MenuKeybind -- Allows you to have a custom keybind for the menu

-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- ThemeManager (Allows you to have a menu theme system)

-- Hand the library over to our managers
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- Adds our MenuKeybind to the ignore list
-- (do you want each config to have a different menu key? probably not.)
SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
ThemeManager:SetFolder('MyScriptHub')
SaveManager:SetFolder('MyScriptHub/specific-game')

-- Builds our config menu on the right side of our tab
SaveManager:BuildConfigSection(Tabs['UI Settings'])

-- Builds our theme menu (with plenty of built in themes) on the left side
-- NOTE: you can also call ThemeManager:ApplyToGroupbox to add it to a specific groupbox
ThemeManager:ApplyToTab(Tabs['UI Settings'])

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()
